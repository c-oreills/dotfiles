# Default to human readable figures
alias df='df -h'
alias du='du -h'

# Handy shell opener
alias go='gnome-open'

# Git aliases
function git() {~/.bin/hub $@}
alias ga='git add'
alias gap='git add -p'
alias gp='git push'
alias gpo='git push origin -u `git rev-parse --abbrev-ref HEAD`'
alias gpu='git push upstream -u `git rev-parse --abbrev-ref HEAD`'
alias gpc='git push christy -u `git rev-parse --abbrev-ref HEAD`'
alias gl='git log'
alias gs='git status'
alias gst='git stash'
alias gsp='git stash pop'
alias gd='git diff'
alias gdc='git diff --cached'
alias gm='git commit -m'
alias gma='git commit -am'
alias gmt='git commit'
alias gmat='git commit -a'
alias gmm='git commit --amend'
alias gmmm='git commit --amend -m "`git log --format="%s" -n 1`"'
alias gb='git branch'
alias gc='git checkout'
alias gcl='git clone'
alias gf='git fetch'
alias gfo='git fetch origin'
alias gfu='git fetch upstream'
alias gr='git merge'
alias grf='git merge --ff-only'
alias gri='git rebase -i'
alias gru='git rebase -i @{u}'
alias gcp='git cherry-pick'

# Hub alias
alias hpr='hub pull-request'

# Django
alias m='./manage.py'
alias mt='./manage.py test'
alias ms='./manage.py shell'

# Zephzone
alias zz='/home/christy/.virtualenvs/zephzone/bin/python /home/christy/projects/zephzone/__init__.py'
alias zzz='/home/christy/.virtualenvs/zephzone/bin/python /home/christy/projects/zephzone/__init__.py --no-brain-fm'

# Git log pipe to tig
function glt () { git log --format="format:commit %H %s" $* | tig; }

# Port forwarding
function pf () { screen -d -m -S pf_$1_$2 bash -c "ssh -Nv -L $2:127.0.0.1:$2 $1"; } 
function pfd () { screen -d -m -S pf_$1_$2_$3 bash -c "ssh -Nv -L $2:127.0.0.1:$3 $1"; } 

# Clear .pyc files
function pyclear () { find . -iname '*.pyc' -delete; }

# Clean up local and remote merged git branches
function gitclean () {
  git remote prune origin;
  git branch -r --merged origin/master | grep -v '\(master\|staging\)' | sed 's/origin\//:/' | xargs -n 1 git push origin;
  git branch --merged origin/master | grep -v '\(master\|staging\)' | xargs git branch -d;
  git remote prune origin;
}

# Git submodule update
function gsu () { pushd $(git rev-parse --show-toplevel) > /dev/null; git submodule sync; git submodule update --init --recursive; popd > /dev/null; }

# Get git repo name
function grepo () { basename $(git rev-parse --show-toplevel); }

# Go to root directory of git repo
function gdr () { cd $(git rev-parse --show-toplevel)/$1; }

# workon this git repo's virtualenv (or make it if it doesn't exist)
function wo () { workon $(grepo) || mkvirtualenv $(grepo); }

# Menu of recent branches or remotes, sorted by commit time, for easy selection
function gcr () {
    if (( $# == 0 )); then
        refpattern=refs/heads/
    else
        refpattern="refs/remotes/$1/"
    fi
    branches=("${(@f)$(git for-each-ref --sort=-committerdate --format '%(refname:short)~~(%(committername)~~%(committerdate:relative))~~%(subject)' --count=9 $refpattern | column -ts'~~'
    )}")
    select branch in $branches; do
        if [ x"$branch" != x"" ]; then
            echo $branch | awk '{print $1}' | xargs git checkout
            return
        fi
    done
}

alias gcro="gcr origin"

# Show the branch name of HEAD on any remotes - e.g. if I've got a floating head from "origin/master" outputs "master"
function gbn () { git show-ref | grep `git rev-parse HEAD` | grep -v 'heads/' | awk '{print $2}' | sed 's/refs.remotes.[^\/]*\///' }

# Checks out a local branch to follow a remote branch
function gcbn () { git checkout -b `gbn` || git checkout `gbn` && git merge --ff-only }

# Github release start
function hrl() {
    DATEPART=`date +%Y%m%d`;
    NAME="$DATEPART$1"
    BRANCHNAME=release/$NAME;
    git fetch origin &&
    git checkout staging &&
    git merge --ff-only &&
    git flow release start $NAME &&
    git flow release publish &&
    echo "https://github.com/HousekeepLtd/housekeep/compare/master...release/$NAME?expand=1"
}

# Github release finish
function hrlf() {
    RELEASE=`git rev-parse --abbrev-ref HEAD`;
    TAG=`echo $RELEASE | sed 's/release\///'`;
    git fetch origin &&
    git checkout master &&
    git merge --ff-only &&
    git checkout staging &&
    git merge --ff-only &&
    git checkout $RELEASE &&
    git merge --ff-only &&
    git flow release finish -m $TAG &&
    git push;
}

# Free up space on /boot by cleaning up old kernels
function bootpurge () { sudo apt-get purge $(dpkg -l linux-{image,headers}-"[0-9]*" | awk '/ii/{print $2}' | grep -ve "$(uname -r | sed -r 's/-[a-z]+//')") }

# tmux colour correction
alias tmx='TERM=xterm-256color tmx'

# terminal emacs
alias emacs='TERM=xterm-256color emacs -nw'

# blog image resizing
function blogimg () { convert $1 -resize 740 $1 }
# blog staging push
alias blogstage='git push staging `git rev-parse --abbrev-ref HEAD`:master'

# Inevitably I will get to the point where I wish I hadn't started using curl
alias curl='echo "Just use Python before this gets out of hand and you regret it\n--------------------------------------------------------------"; curl'

# Dropbox multiple accounts workaround
alias dropalt='HOME="$HOME/.dropbox-alt" && /usr/bin/dropbox start -i'

# Open Chrome to gateway pay
function wlangw { route | grep wlan0 | grep default | sed 's/\s\+/\t/g' | cut -f 2 | xargs chromium-browser }

# Docker container IP
alias dockerip="docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'"

# pip install and save to requirements
function pip-install-save {
    REQSFILE="${2:-requirements.txt}"
    pip install $1 && pip freeze | grep "^$1=" >> $REQSFILE && sort $REQSFILE -o $REQSFILE;
}

### Home specific ###
if [ -f ~/.aliases_home ]; then
    . ~/.aliases_home
fi

### Work specific ###
if [ -f ~/.aliases_work ]; then
    . ~/.aliases_work
fi
